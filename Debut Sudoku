"Hello World"
"bien inscrit merci Pedro <3"
grille=np.array([\
[9,0,0,1,0,0,0,0,5],\
[0,0,5,0,9,0,2,0,1],\
[8,0,0,0,4,0,0,0,0],\
[0,0,0,0,8,0,0,0,0],\
[0,0,0,7,0,0,0,0,0],\
[0,0,0,0,2,6,0,0,9],\
[2,0,0,3,0,0,0,0,6],\
[0,0,0,2,0,0,9,0,0],\
[0,0,1,9,0,4,5,7,0]])

#on stocke les grillles sous forme de matrice.
import numpy as np

grille=np.array([\
[9,0,0,1,0,0,0,0,5],\
[0,0,5,0,9,0,2,0,1],\
[8,0,0,0,4,0,0,0,0],\
[0,0,0,0,8,0,0,0,0],\
[0,0,0,7,0,0,0,0,0],\
[0,0,0,0,2,6,0,0,9],\
[2,0,0,3,0,0,0,0,6],\
[0,0,0,2,0,0,9,0,0],\
[0,0,1,9,0,4,5,7,0]])

def pos(i,j):
    i+=1
    j+=1
    p=9*i+j
    
def position_to_indices(p):
    i=p//9
    j=p%9
    return i,j

def ligne(p):
    return p%9
    
def colonne(p):
    return p%9

def possibilite_sur_ligne(G,i,j):
    if G[i,j]!=0:
        return []
    possible=[]
    for k in range(1,10):
        if k not in G[i]:
            possible.append(k)
    return possible


def possibilite_sur_colonne(G,i,j):
    if G[i,j]!=0:
        return []
    possible=[]
    for k in range(1,10):
        if k not in G[:,j]:
            possible.append(k)
    return possible

def possibilite_sur_carre(G,i,j):
    if G[i,j]!=0:
        return []
    p=3*(i//3)
    q=3*(j//3)
    possible=[]
    for k in range(1,10):
        if k not in G[p:p+3 , q:q+3]:
            possible.append(k)
    return possible


def possibilite(G,i,j):
    pL=possibilite_sur_ligne(G,i,j)
    pC=possibilite_sur_colonne(G,i,j)
    pS=possibilite_sur_carre(G,i,j)
    possible=[]
    n=len(pL)
    for k in range(n):
        if pL[k] in pC :
            if pL[k] in pS:
                possible.append(pL[k])
    return possible
